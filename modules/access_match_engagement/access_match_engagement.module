<?php

/**
 * @file
 * Module for customizing match_engagement node.
 */

use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Entity\EntityInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_views_pre_render().
 */
function access_match_engagement_views_pre_render(ViewExecutable $view) {
  if (isset($view) && ($view->storage->id() == 'match_engagement_view')) {
    $view->element['#attached']['library'][] = 'access_match_engagement/match_engagement_view';
  }
}

/**
 * Implements hook_block_build_BASE_BLOCK_ID_alter().
 */
function access_match_engagement_block_build_views_block_alter(array &$build, BlockPluginInterface $block) {
  // Using label because block numbers seem to change.
  if ($block->label() == 'match engagement view: Block - My Engagement') {
    $build['#create_placeholder'] = FALSE;
  }
}

/**
 * Implements hook_form_alter().
 */
function access_match_engagement_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_match_engagement_edit_form' || $form_id == 'node_match_engagement_form') {
    // Attach javascript.
    $form['#attached']['library'][] = 'access_match_engagement/access_match_engagement';
    $form['promote']['widget']['value']['#title'] = 'Form Accepted';
    $form['promote']['widget']['value']['#description'] = 'Once checked, all fields will be available to fill out.';
    $request = \Drupal::request();
    $request_type = $request->get("type");
    // Default to plus if type is unexpected value for node creation.
    $request_type = $request_type == 'premier' ? 'premier' : 'plus';
    if ($request_type == 'premier') {
      $form['#title'] = t('Create Premier Engagement');
    }
    if (!isset($request_type) && $form_id != 'node_match_engagement_edit_form') {
      $url = '/node/add/match_engagement?type=plus';
      $response = new RedirectResponse($url);
      $response->send();
    }
    $current_user = \Drupal::currentUser();
    $roles = $current_user->getRoles();
    $accepted = $form['promote']['widget']['value']['#default_value'];
    $form['field_node_type']['#access'] = FALSE;
    if ($form_id == 'node_match_engagement_form') {
      $form['field_node_type']['widget']['#default_value'][0] = $request_type;
    }

    $form['fieldset_launch'] = ['#type' => 'fieldset'];

    $form['field-launch-presentation'] = [
      '#group' => 'fieldset_launch',
    ];
    $form['field-launch-presentation-date'] = [
      '#group' => 'fieldset_launch',
    ];
    $form['field-wrap-presentation'] = [
      '#group' => 'fieldset_launch',
    ];
    $form['field-wrap-presentation-date'] = [
      '#group' => 'fieldset_launch',
    ];

    if (!$accepted) {
      $form['field_requested_engagement']['#access'] = FALSE;
      $form['field_project_image']['#access'] = FALSE;
      $form['field_project_deliverables']['#access'] = FALSE;
      $form['fieldset_launch']['#access'] = FALSE;
      $form['group_milestones_group']['#access'] = FALSE;
      $form['field_milestone_description']['#access'] = FALSE;
      $form['field_milestone_completion_date']['#access'] = FALSE;
      $form['field_milestone_actual_date']['#access'] = FALSE;
      $form['field_milestone_title_1']['#access'] = FALSE;
      $form['field_milestone_description_1']['#access'] = FALSE;
      $form['field_completion_date_goal_1']['#access'] = FALSE;
      $form['field_actual_completion_date_1']['#access'] = FALSE;
      $form['field_milestone_title_2']['#access'] = FALSE;
      $form['field_milestone_description_2']['#access'] = FALSE;
      $form['field_completion_date_goal_2']['#access'] = FALSE;
      $form['field_actual_completion_date_2']['#access'] = FALSE;
      $form['field_milestone_title_3']['#access'] = FALSE;
      $form['field_milestone_description_3']['#access'] = FALSE;
      $form['field_completion_date_goal_3']['#access'] = FALSE;
      $form['field_actual_completion_date_3']['#access'] = FALSE;
      $form['field_milestone_title_4']['#access'] = FALSE;
      $form['field_milestone_description_4']['#access'] = FALSE;
      $form['field_completion_date_goal_4']['#access'] = FALSE;
      $form['field_actual_completion_date_4']['#access'] = FALSE;
      $form['field_hpc_resources_needed']['#access'] = FALSE;
      $form['field_consultant']['#access'] = FALSE;
      $form['field_mentor']['#access'] = FALSE;
      $form['field_researcher']['#access'] = FALSE;
      $form['field_students']['#access'] = FALSE;
      $form['field_qualifications']['#access'] = FALSE;
      $form['field_student_learning']['#access'] = FALSE;
      $form['field_education']['#access'] = FALSE;
      $form['field_programming_skill_level']['#access'] = FALSE;
      $form['field_launch_presentation']['#access'] = FALSE;
      $form['field_launch_presentation_date']['#access'] = FALSE;
      $form['field_wrap_presentation']['#access'] = FALSE;
      $form['field_wrap_presentation_date']['#access'] = FALSE;
      $form['field_git_contribution']['#access'] = FALSE;
      $form['field_planned_portal_contributio']['#access'] = FALSE;
      $form['field_planned_publications']['#access'] = FALSE;
      $form['field_what_match_will_learn']['#access'] = FALSE;
      $form['field_notes']['#access'] = FALSE;
      $form['field_what_is_the_impact_on_othe']['#access'] = FALSE;
      $form['field_what_is_the_impact_on_the_']['#access'] = FALSE;
      $form['What is the impact on the development discipline(s) of the project?']['#access'] = FALSE;
      $form['field_is_there_an_impact_on_info']['#access'] = FALSE;
      $form['field_is_there_an_impact_on_inst']['#access'] = FALSE;
      $form['field_is_there_an_impact_on_soci']['#access'] = FALSE;
      $form['field_is_there_an_impact_on_tech']['#access'] = FALSE;
      $form['field_is_there_an_impact_physica']['#access'] = FALSE;
      $form['field_lessons_learned']['#access'] = FALSE;
      $form['field_overall_results']['#access'] = FALSE;
      $form['field_status']['#access'] = FALSE;
    }
    if (!in_array('administrator', $roles) || !in_array('match_sc', $roles)) {
      $form['field_email_user']['#access'] = FALSE;
      $form['field_notes_to_author']['#access'] = FALSE;
      $form['field_match_interested_users']['#access'] = FALSE;
    }
    if ($form_id == 'node_match_engagement_edit_form') {
      $node_param = \Drupal::routeMatch()->getParameter('node');
      $node_storage = \Drupal::entityTypeManager()->getStorage('node');
      $node = $node_storage->load($node_param->id());
      $type = $node->get('field_node_type')->value;
      if ($type == 'plus') {
        unset($form['field_requested_engagement']['widget']['#options'][12]);
        unset($form['field_requested_engagement']['widget']['#options'][18]);
        $form['field_consultant']['#access'] = FALSE;
      }
      if ($type == 'premier') {
        $title = $node->get('title')->value;
        $form['#title'] = t('Edit Premier Engagement ') . $title;
        unset($form['field_requested_engagement']['widget']['#options'][3]);
        $form['field_mentor']['#access'] = FALSE;
        $form['field_students']['#access'] = FALSE;
        $form['field_qualifications']['#access'] = FALSE;
        $form['field_student_learning']['#access'] = FALSE;
        $form['field_education']['#access'] = FALSE;
        $form['field_programming_skill_level']['#access'] = FALSE;
      }
    }
    $form['field_email_user']['#group'] = 'options';
    if (in_array('match_sc', $roles)) {
      unset($form['promote']['#group']);
      unset($form['field_email_user']['#group']);
      $form['promote']['#access'] = TRUE;
      $form['field_email_user']['#access'] = TRUE;
      $form['status']['#access'] = TRUE;
    }
    $form['field_notes_to_author']['#group'] = 'options';
    $form['field_notes_to_author']['#attributes']['class'][] = 'hide';
  }
  if ($form_id == 'node_match_engagement_form') {
    // Custom Submit handler.
    $form['actions']['submit']['#submit'][] = 'access_match_engagement_submit_function';
  }
}

/**
 *
 */
function access_match_engagement_submit_function(&$form, FormStateInterface $form_state) {
  $message = t('Thank you for submitting your project. We will be in touch soon.');
  \Drupal::messenger()->addMessage($message);
}

/**
 * Implements hook_mail().
 */
function access_match_engagement_mail($key, &$message, $params) {
  switch ($key) {
    case 'ame-admin-update':
    case 'ame-accepted-update':
    case 'interested-update':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $params['title'];
      $message['body'][] = $params['body'];
      break;
  }
}

/**
 * Implements hook_node_insert().
 */
function access_match_engagement_node_insert(EntityInterface $entity) {
  $type = $entity->bundle();
  if ($type == 'match_engagement') {
    $get_fields = $entity->getFields();
    $node_type = $get_fields['field_node_type']->getValue();
    $ame_type = $node_type[0]['value'] == 'plus' ? '+' : ' Premier';
    $ame_nid = $entity->id();
    $ame_title = Xss::filter($entity->gettitle());
    access_match_engagement_admin_email($ame_nid, $ame_title, $ame_type);
  }
}

/**
 * Implements hook_entity_presave().
 */
function access_match_engagement_entity_presave(EntityInterface $entity) {
  $type = $entity->bundle();
  if ($type == 'match_engagement' && !empty($entity->id())) {
    $get_fields = $entity->getFields();
    $email_user = $get_fields['field_email_user']->getValue();
    $current_user = \Drupal::currentUser()->id();
    $owner_user = $entity->getOwner();
    $get_fields = $entity->getFields();
    $node_type = $get_fields['field_node_type']->getValue();
    $ame_type = $node_type[0]['value'] == 'plus' ? '+' : ' Premier';
    if ($email_user[0]['value']) {
      $ame_nid = $entity->id();
      $ame_title = Xss::filter($entity->gettitle());
      $ame_notes = $get_fields['field_notes_to_author']->getValue();
      $ame_notes = $ame_notes[0]['value'] ?? '';
      access_match_engagement_accepted_email($ame_nid, $ame_title, $ame_notes, $owner_user->id(), $ame_type);
      $entity->set('field_email_user', 0);
    }
  }
}

/**
 * Build access_match_engagement interested Email.
 */
function access_match_engagement_interested_email($to_uids) {
  $body['string'] = [
    '#type' => 'inline_template',
    '#template' => '<p>{{ intro }} {{ link | raw }}.<p>',
    '#context' => [
      'intro' => t('New interested user alert! Please check website for '),
      'link' => "<a href='https://support.access-ci.org/match-interested-users'>details</a>",
    ],
  ];
  // Lookup each user by to_uids and add their email to the $to_email string comma separated.
  $to_email = '';
  foreach ($to_uids as $uid) {
    $user = User::load($uid);
    $to_email .= $user->getEmail() . ',';
  }
  // Remove the last comma.
  $to_email = rtrim($to_email, ',');
  $render_service = \Drupal::service('renderer');
  $params = [];
  $params['to'] = $to_email;
  $params['body'] = $render_service->renderRoot($body);
  $params['title'] = "New Interested User Alert";
  // Add logger message of sending interested email.
  \Drupal::logger('access_match_engagement')->notice('Sending interested email to: ' . $to_email);
  ame_send('interested-update', $params);
}

/**
 * Build access_match_engagement accepted Email.
 */
function access_match_engagement_accepted_email($ame_nid, $ame_title, $ame_notes, $author, $ame_type) {
  $options = ['absolute' => TRUE];
  $here = Url::fromRoute('entity.node.canonical', ['node' => $ame_nid], $options);
  $body['string'] = [
    '#type' => 'inline_template',
    '#template' => '<p>{{ intro }}<p>
    <p>{{ link }}</p>
    <p>{{ notes }}</p>',
    '#context' => [
      'intro' => t('Your new Match+ Engagement submission has been accepted. Please fill in the rest of this form at your convenience:'),
      'link' => Link::fromTextAndUrl($ame_title, $here)->toString(),
      'notes' => $ame_notes,
    ],
  ];
  $current_user = User::load(\Drupal::currentUser()->id());
  $node_author = User::load($author);
  $env = getenv('PANTHEON_ENVIRONMENT');
  if ($env == 'live') {
    $to_email = $node_author->getEmail();
  }
  else {
    $to_email = $current_user->getEmail();
  }
  $render_service = \Drupal::service('renderer');
  $params = [];
  $params['to'] = $to_email;
  $params['body'] = $render_service->render($body);
  $params['title'] = "MATCH$ame_type Engagement: $ame_title";
  ame_send('ame-accepted-update', $params);
}

/**
 * Build access_match_engagement admin Email.
 */
function access_match_engagement_admin_email($ame_nid, $ame_title, $ame_type) {
  $options = ['absolute' => TRUE];
  $here = Url::fromRoute('entity.node.canonical', ['node' => $ame_nid], $options);
  $body['string'] = [
    '#type' => 'inline_template',
    '#template' => '<p>{{ intro }}<p>
    <p>{{ link }}</p>',
    '#context' => [
      'intro' => t('A MATCH Engagement has been saved:'),
      'link' => Link::fromTextAndUrl($ame_title, $here)->toString(),
    ],
  ];
  // Get all user emails with the match_pm or match_sc role.
  $query = \Drupal::entityQuery('user');
  $group = $query
    ->orConditionGroup()
    ->condition('roles', 'match_pm')
    ->condition('roles', 'match_sc');
  $ids = $query->condition($group)
    ->condition('status', 1)
    ->execute();
  $users = User::loadMultiple($ids);
  $email = '';
  $user_count = count($users);
  $iterate = 0;
  foreach ($users as $user) {
    $iterate++;
    $email .= $user->get('mail')->getString();
    if ($user_count != $iterate) {
      $email .= ",";
    }
  }
  $current_user = User::load(\Drupal::currentUser()->id());
  $env = getenv('PANTHEON_ENVIRONMENT');
  if ($env == 'live') {
    $to_email = $email;
  }
  else {
    $to_email = $current_user->getEmail();
  }
  $render_service = \Drupal::service('renderer');
  $params = [];
  $params['to'] = $to_email;
  $params['body'] = $render_service->render($body);
  $params['title'] = "MATCH$ame_type Engagement: $ame_title";
  ame_send('ame-admin-update', $params);
}

/**
 * Send email.
 */
function ame_send($key, $params) {
  $to = $params['to'];
  $langcode = \Drupal::currentUser()->getPreferredLangcode();
  $send = TRUE;
  $module = 'access_match_engagement';
  $mailManager = \Drupal::service('plugin.manager.mail');
  $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
  return $result;
}

/**
 * Hook_cron.
 */
function access_match_engagement_cron() {
  // @todo once working, limit to run on production only.
  $config = \Drupal::configFactory()->getEditable('access_match_engagement.settings');
  $interested_status = $config->get('interested');
  // Send interested email at 1:00am.
  if ((date('G', time()) == 01) && (date('i', time()) >= 0) && (date('i', time()) < 5) && $interested_status == 1) {
    // Lookup users by role.
    $uids = \Drupal::entityQuery('user')
      ->condition('status', 1)
      ->condition('roles', 'match_pm')
      ->execute();
    access_match_engagement_interested_email($uids);
    $config->set('interested', 0);
    $config->save();
  }
}
