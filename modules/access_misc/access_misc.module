<?php

/**
 * @file
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\views\ViewExecutable;
use Drupal\taxonomy\Entity\Term;
use Drupal\access_misc\Plugin\Util\EventDateConvert;
use Drupal\views\Views;

/**
 * Implements hook_views_post_render().
 */
function access_misc_views_post_render(ViewExecutable $view) {
  // Override view /admin/structure/views/view/resources/edit/page_2 title.
  if ($view->id() == 'resources' && isset($view->getDisplay()->view->element['#display_id']) && $view->getDisplay()->view->element['#display_id'] == 'page_2') {
    $tid = $view->getTitle();
    if (term::load($tid)) {
      $title = 'CI Links tagged ' . term::load($tid)->get('name')->value;
      // Set the view title.
      $view->setTitle($title);
      // Set the route title.
      $route = \Drupal::routeMatch()->getCurrentRouteMatch()->getRouteObject();
      $route->setDefault('_title', $title);
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function access_misc_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  switch ($entity->getEntityTypeId()) {
    case 'eventseries':
      $date = $build['event_instances'][0]['#title'];
      $dates = explode(' - ', $date);
      $convert_date = new EventDateConvert($dates[0], $dates[1]);
      $build['event_instances'][0]['#title'] = $convert_date->getStart() . " - " . $convert_date->getEnd();
      break;

    case 'eventinstance':
      $convert_date = new EventDateConvert($build['date'][0]['start_date']['#markup'], $build['date'][0]['end_date']['#markup']);
      $build['date'][0]['start_date']['#markup'] = $convert_date->getStart();
      $build['date'][0]['end_date']['#markup'] = $convert_date->getEnd();
      break;
  }
}

/**
 * Implements hook_datalayer_alter()
 *
 * If the user is not anonymous, add hashed user id and account creation
 * date to dataLayer.
 */
function access_misc_datalayer_alter(&$data_layer) {

  if (!\Drupal::currentUser()->isAnonymous()) {

    // Hide the uid field in data layer.
    if (isset($data_layer['userUid'])) {
      unset($data_layer['userUid']);
    }

    // Add hashed user id to data layer for logged in users.
    $userId = \Drupal::currentUser()->id();
    $data_layer['hashedUserId'] = hash('md4', $userId);

    // Add account creation date to data layer for logged in users.
    $account = User::load($userId);

    // Calculate a time-bucket for the age of the user's creation date as follows:
    // 1: under 1 week
    // 2: under 1 month
    // 3: under 3 month
    // 4: under 6 months
    // 5: under 12 months
    // 6: under 24 months
    // 7: over 24 months

    $created_time = $account->getCreatedTime();
    $current_time = time();
    $delta_time = $current_time - $created_time;
    $delta_weeks = $delta_time / 60 / 60 / 24 / 7;
    if ($delta_weeks < 1) {
      $time_bucket = 1;
    } else if ($delta_weeks < 4) {
      $time_bucket = 2;
    } else if ($delta_weeks < 12) {
      $time_bucket = 3;
    } else if ($delta_weeks < 24) {
      $time_bucket = 4;
    } else if ($delta_weeks < 52) {
      $time_bucket = 5;
    } else if ($delta_weeks < 104) {
      $time_bucket = 6;
    } else {
      $time_bucket = 7;
    }
    $data_layer['user_created_within'] = $time_bucket;
  }
}

/**
 * Implements hook_form_alter().
 */
function access_misc_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_affinity_group_edit_form' || $form_id == 'node_affinity_group_form') {
    $form['#attached']['library'][] = 'access_misc/add_select';
  }
  // Custom tags on /form/ci-link webform.
  if ($form_id == 'webform_submission_resource_add_form' || $form_id == 'webform_submission_resource_edit_form') {
    $form['#attached']['library'][] = 'access_misc/custom_tags';
    $view = Views::getView('node_add_tags');
    $view->setDisplay('block_1');
    $view->execute();
    $rendered = $view->render();
    $output = \Drupal::service('renderer')->render($rendered);
    $form['custom_tags'] = [
      '#markup' => "<details class='tags'><summary>Select relevant tags</summary>$output</details>",
      '#weight' => 3,
      '#allowed_tags' => [
        'button',
        'details',
        'summary',
        'span',
        'h2',
      ],
    ];
  }
}
/*
  * Implements hook_mail().
  */
function access_misc_mail($key, &$message, $params) {
  switch ($key) {
    case 'notify_role':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
  }
}
