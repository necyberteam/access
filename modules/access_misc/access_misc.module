<?php

/**
 * @file
 */

use Drupal\access_misc\Plugin\Util\EventDateConvert;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\user\UserInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;
use Drupal\views\ViewExecutable;
use Drupal\Component\Utility\Xss;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Url;

/**
 * Implements hook_page_attachments().
 */
function access_misc_page_attachments(&$variables) {
  // Adding global library to all pages.
  $variables['#attached']['library'][] = 'access_misc/global';
}

/**
 * Implements hook_user_login().
 *
 * Redirect people to the <front> page on successful login
 * unless the current or destination parameter is set.
 * Also, clear any messages to prevent the previous
 * access denied message from showing after login.
 */
function access_misc_user_login(UserInterface $account) {
  // Check if destination is set in url.
  $destination = \Drupal::request()->query->get('destination');
  $current = \Drupal::request()->query->get('current');
  if (!$destination) {
    $current_request = \Drupal::service('request_stack')->getCurrentRequest();
    $url = Url::fromRoute('<front>', [], ['absolute' => 'true'])->toString();
    if ($current) {
      $url = Url::fromUri("internal:$current")->toString();
    }
    $current_request->query->set(
      'destination',
      $url
    );
  }

  // Clear messenger queue.
  \Drupal::messenger()->deleteAll();

  $last_login = $account->getLastAccessedTime();
  if (!$last_login) {
    // Message for first time login.
    \Drupal::messenger()->addMessage(t('Welcome and thanks for joining! Now please complete <a href="/community-persona">your profile</a>.'));
  }
}

/**
 * Implements hook_views_pre_render().
 */
function access_misc_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'infrastructure_news') {
    $view->element['#attached']['library'][] = 'access_misc/add_select';
  }
  if ($view->id() == 'recurring_events_event_series' && $view->getDisplay()->view->element['#display_id'] == 'block_1') {
    if (empty($view->result) && empty($view->getExposedInput())) {
      $view->exposed_widgets = NULL;
    }
  }
  if ($view->id() == 'user_profile') {
    $view->element['#attached']['library'][] = 'cssn/cssn_library';
  }
}

/**
 * Implements hook_views_post_render().
 *
 * Override page title for views of people with interest/expertise tags.
 */
function access_misc_views_post_render(ViewExecutable $view) {
  // Override view /admin/structure/views/view/people_with_interest_tags/edit/page_1 title.
  if (($view->id() == 'people_with_interest_tags' && isset($view->getDisplay()->view->element['#display_id']) && $view->getDisplay()->view->element['#display_id'] == 'page_1') ||
      ($view->id() == 'people_with_expertise_tags' && isset($view->getDisplay()->view->element['#display_id']) && $view->getDisplay()->view->element['#display_id'] == 'page_1')) {
    $path = \Drupal::service('path.current')->getPath();
    $path_args = explode('/', $path);
    $tid = is_numeric($path_args[2]) ? $path_args[2] : FALSE;
    if ($term = term::load($tid)) {
      $title = 'People with interest in ' . $term->get('name')->value;
      if ($view->id() == 'people_with_expertise_tags') {
        $title = 'People with expertise in ' . $term->get('name')->value;
      }
      // Set the view title.
      $view->setTitle($title);
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function access_misc_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  switch ($entity->getEntityTypeId()) {
    case 'eventseries':
      $date = $build['event_instances'][0]['#title'];
      $dates = explode(' - ', $date);
      $convert_date = new EventDateConvert($dates[0], $dates[1]);
      $build['event_instances'][0]['#title'] = $convert_date->getStart() . " - " . $convert_date->getEnd();
      break;

    case 'eventinstance':
      $date = $build['date'][0];
      $convert_date = new EventDateConvert($date['start_date']['#markup'], $date['end_date']['#markup']);
      $build['date'][0]['start_date']['#markup'] = $convert_date->getStart();
      $build['date'][0]['end_date']['#markup'] = $convert_date->getEnd();
      break;
  }
}

/**
 * Implements hook_preprocess_views_view_field for views-view-field.html.twig.
 */
function access_misc_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
  $field = $variables['field'];

  // Overwrite affinity_groups into /people page on the
  // /admin/structure/views/view/nect_cc_people/edit/page_1 view.
  if ($view->id() == 'nect_cc_people' && $view->current_display == 'page_1' && $field->options['id'] == 'uid_1') {
    $uid = $variables['output'];
    // Get all 'affinity_group' flags by user.
    $flag_service = \Drupal::service('flag');
    $flag_storage = $flag_service->getFlagById('affinity_group');
    $flagging_storage = \Drupal::entityTypeManager()->getStorage('flagging');
    $flaggings = $flagging_storage->loadByProperties(['uid' => $uid, 'flag_id' => $flag_storage->id()]);
    $affinity_groups = "";
    $n = 0;
    foreach ($flaggings as $flagging) {
      $tid = $flagging->getFlaggableId();
      // Entity query to get affinity_group node that has tid for field_affinity_group.
      if (!empty($tid)) {
        if ($affinity_groups == "") {
          $affinity_groups .= '<div class="small font-weight-bold mt-2">' . t('Affinity Groups') . '</div>';
        }
        if ($n < 3) {
          $entity_query = \Drupal::entityQuery('node')
            ->condition('type', 'affinity_group')
            ->condition('field_affinity_group', $tid)
            ->accessCheck(FALSE)
            ->execute();
          if ($entity_query) {
            $term = Term::load($tid);
            $affinity_group_name = $term->getName();
            $nid = implode($entity_query);
            // Drupal 10 Create link to affinity group node.
            $affinity_groups .= "<a class='small' href='/node/$nid'>$affinity_group_name</a> ";

          }
        }
      $n++;
      }
    }
    $variables['output'] = Markup::create($affinity_groups);
  }

  // Display event instance date in the right format.
  if ($view->id() == 'recurring_events_event_instances' && ($view->current_display == 'block_1' || $view->current_display == 'block_2')) {
    if ($field->field == 'date__value') {
      // Default separator between start and end dates is ' - '.
      $output = explode(' - ', $variables['output']);
      if (count($output) == 2) {
        $start_date = $output[0];
        $end_date = $output[1];
        $date = new EventDateConvert($start_date, $end_date);
        $variables['output'] = Markup::create($date->getStart() . " - " . $date->getEnd());
      }
    }
  }
}

/**
 * Implements hook_datalayer_alter()
 *
 * If the user is not anonymous, add hashed user id, account creation
 * date, and Carnegie Code to dataLayer.
 */
function access_misc_datalayer_alter(&$data_layer) {

  if (!\Drupal::currentUser()->isAnonymous()) {

    // Hide the uid field in data layer.
    if (isset($data_layer['userUid'])) {
      unset($data_layer['userUid']);
    }

    // Add hashed user id to data layer for logged in users.
    $userId = \Drupal::currentUser()->id();
    $data_layer['hashedUserId'] = hash('md4', $userId);

    // Add account creation date to data layer for logged in users.
    $account = User::load($userId);

    // Calculate a time-bucket for the age of the user's creation date as follows:
    // 1: under 1 week
    // 2: under 1 month
    // 3: under 3 month
    // 4: under 6 months
    // 5: under 12 months
    // 6: under 24 months
    // 7: over 24 months.
    $created_time = $account->getCreatedTime();
    $current_time = time();
    $delta_time = $current_time - $created_time;
    $delta_weeks = $delta_time / 60 / 60 / 24 / 7;
    if ($delta_weeks < 1) {
      $time_bucket = 1;
    }
    elseif ($delta_weeks < 4) {
      $time_bucket = 2;
    }
    elseif ($delta_weeks < 12) {
      $time_bucket = 3;
    }
    elseif ($delta_weeks < 24) {
      $time_bucket = 4;
    }
    elseif ($delta_weeks < 52) {
      $time_bucket = 5;
    }
    elseif ($delta_weeks < 104) {
      $time_bucket = 6;
    }
    else {
      $time_bucket = 7;
    }
    $data_layer['user_created_within'] = $time_bucket;

    $carnegie_code = 'unknown';
    try {
      $org = $account->get('field_access_organization')->getValue();
      if (!empty($org)) {
        $org = reset($org);
        if (array_key_exists('target_id', $org)) {
          $org = \Drupal::entityTypeManager()->getStorage('node')->load($org['target_id']);
          if ($org->get('field_carnegie_code')) {
            $carnegie_code = $org->get('field_carnegie_code')->value;
          }
        }
      }
    } catch (\Exception $e) {
      \Drupal::logger('access_misc')->error('Error loading user organization: ' . $e->getMessage());
    }
    $data_layer['carnegie_code'] = $carnegie_code;
  }
}

/**
 * Implements hook_form_alter().
 */
function access_misc_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Custom tags on /events/add
  if ($form_id == 'eventseries_default_add_form' || $form_id == 'eventseries_default_edit_form') {
    $form['consecutive_recurring_date'] = [];
    $form['field_tags_replace'] = [
      '#type' => 'container',
      '#attributes' => [
        'id' => 'field-tags-replace',
        'data-suggest' => '0',
      ],
      '#weight' => 15,
    ];

    $form['field_tags_replace']['field_suggest'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => [
          'bg-light-teal',
          'my-5',
          'p-5'
        ]
      ],
    ];

    $form['field_tags_replace']['field_suggest']['tag_list'] = [
      '#markup' => "<div id='match-tag-list' class='mb-3'>Get tag suggestions based on your description and then curate as necessary.</div>",
    ];
    $form['field_tags_replace']['field_suggest']['replace_button'] = [
      '#type' => 'button',
      '#value' => t('Suggest Tags'),
      '#limit_validation_errors' => array(),
      '#attributes' => [
        'class' => [
          'ml-0'
        ],
      ],
      '#ajax' => [
        'callback' => 'access_misc_replace_event_section_callback',
        'wrapper' => 'field-tags-replace',
      ],
    ];
    $form['field_tags_replace']['user_message'] = [
      '#markup' => "",
    ];


    $add_tags = \Drupal::service('access_misc.addtags');
    $output = $add_tags->getView();
    $tag_label = t('Tags');
    $tag_description = t('Select tags that relate to your engagement. Tags will help us find people with related expertise.');
    $tag_summary = t('Select Tags');

    $form['node_add_tags'] = [
      '#markup' => "<h4 class='form-required'>$tag_label</h4>
        <div class='tag-description'>$tag_description</div>
        <div id='tag-suggestions'></div>
        <details class='tags m-0 mb-8'><summary class='font-bold'>$tag_summary</summary>$output</details>",
      '#weight' => 15,
      '#allowed_tags' => [
        'button',
        'details',
        'summary',
        'div',
        'span',
        'h2',
        'h4',
      ],
    ];

    // Attach javascript.
    $form['#attached']['library'][] = 'access_misc/node_add_tags';
    $form['#attached']['library'][] = 'access_misc/events';

  }
  // Custom tags on /form/ci-link webform.
  if ($form_id == 'webform_submission_resource_add_form' || $form_id == 'webform_submission_resource_edit_form') {
    $form['field_tags_replace'] = [
      '#type' => 'container',
      '#attributes' => [
        'id' => 'field-tags-replace',
        'data-suggest' => '0',
      ],
      '#weight' => 2,
    ];

    $form['field_tags_replace']['field_suggest'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => [
          'bg-light-teal',
          'my-5',
          'p-5'
        ]
      ],
    ];

    $form['field_tags_replace']['field_suggest']['tag_list'] = [
      '#markup' => "<div id='match-tag-list' class='mb-3'>Get tag suggestions based on your description and then curate as necessary.</div>",
    ];
    $form['field_tags_replace']['field_suggest']['replace_button'] = [
      '#type' => 'button',
      '#value' => t('Suggest Tags'),
      '#limit_validation_errors' => array(),
      '#attributes' => [
        'class' => [
          'ml-0'
        ],
      ],
      '#ajax' => [
        'callback' => 'access_misc_replace_section_callback',
        'wrapper' => 'field-tags-replace',
      ],
    ];
    $form['field_tags_replace']['user_message'] = [
      '#markup' => "",
    ];

    $form['#attached']['library'][] = 'access_misc/custom_tags';
    $add_tags = \Drupal::service('access_misc.addtags');
    $output = $add_tags->getView();
    $form['custom_tags'] = [
      '#markup' => "<div id='tag-suggestions'></div>
                    <details open class='tags'>
                     <summary><label class='js-form-required form-required'>Select relevant tags</label></summary>
                      $output
                    </details>",
      '#weight' => 3,
      '#allowed_tags' => [
        'button',
        'details',
        'summary',
        'label',
        'span',
        'div',
        'h2',
      ],
    ];

  }
  if ($form_id == 'user_form') {
    $form['actions']['submit']['#submit'][] = 'access_misc_user_password_change';
  }
}

/**
 * Custom submit handler for user_form.
 */
function access_misc_user_password_change($form, FormStateInterface $form_state) {
  $password = $form_state->getValue('pass');
  if ($password) {
    \Drupal::messenger()->addMessage(t('Password changed successfully.'));
  }
}

/**
 * Ajax callback function to replace the section with '#markup'.
 */
function access_misc_replace_event_section_callback(array &$form, FormStateInterface $form_state) {
  $raw_data = $form_state->getUserInput();
  $body_filter = Xss::filter($raw_data['body'][0]['value']);
  $suggested_tag_ids = '0';
  if (strlen($body_filter) >= 400) {
    $llm = \Drupal::service('access_llm.ai_references_generator');
    $llm->generateTaxonomyPrompt('tags', 1, $body_filter);
    $suggested_tag_ids = implode(', ', $llm->taxonomyIdSuggested());
    $form['field_tags_replace']['user_message'] = [
      '#markup' => "",
    ];
  }
  else {
    $form['field_tags_replace']['user_message'] = [
      '#markup' => "<div class='match-tag-list bg-blue-200 text-sky-900 my-5 p-5'>
                    <strong class='text-sky-900'>Fill in the description above to get suggested tags.</strong><br />
                    Your description must be over 400 characters to get a suggestion.</div>",
    ];
  }
  $form['field_tags_replace']['#attributes']['data-suggest'] = $suggested_tag_ids ;

  // Return the updated section.
  return $form['field_tags_replace'];
}

function access_misc_replace_section_callback(array &$form, FormStateInterface $form_state) {
  $raw_data = $form_state->getUserInput();
  $body_filter = Xss::filter($raw_data['description']);
  $suggested_tag_ids = '0';
  if (strlen($body_filter) >= 100) {
    $llm = \Drupal::service('access_llm.ai_references_generator');
    $llm->generateTaxonomyPrompt('tags', 1, $body_filter);
    $suggested_tag_ids = implode(', ', $llm->taxonomyIdSuggested());
    $form['field_tags_replace']['user_message'] = [
      '#markup' => "",
    ];
  }
  else {
    $form['field_tags_replace']['user_message'] = [
      '#markup' => "<div class='match-tag-list bg-blue-200 text-sky-900 my-5 p-5'>
                    <strong class='text-sky-900'>Fill in the description above to get suggested tags.</strong><br />
                    Your description must be over 100 characters to get a suggestion.</div>",
    ];
  }
  $form['field_tags_replace']['#attributes']['data-suggest'] = $suggested_tag_ids ;

  // Return the updated section.
  return $form['field_tags_replace'];
}

/**
 * Implements hook_mail().
 */
function access_misc_mail($key, &$message, $params) {
  switch ($key) {
    case 'notify_role':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
  }
}

/**
 * Implements hook_cron().
 */
function access_misc_cron() {
  // Run this cron job every day at 3am.
  $currentTime = \Drupal::time()->getCurrentTime();
  $hour = date('H', $currentTime);
  $min = date('i', $currentTime);

  // Cron runs every 10 minutes
  if ($hour == 3 && $min < 20) {
    // Run the ingest of ACCESS organizations.
    \Drupal::service('access_misc.import_access_orgs')->ingest();
  }

}
