<?php

/**
 * @file
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\block\Entity\Block;
use Drupal\Core\Render\Markup;
use Drupal\cssn\Plugin\Util\RoleProgramSorter;
use Drupal\user\Entity\User;
use Drupal\views\ViewExecutable;

/**
 * @file
 * Module for CSSN.
 */

/**
 * Implements hook_views_pre_render().
 */
function cssn_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'cssn_directory') {
    $view->element['#attached']['library'][] = 'cssn/cssn_directory';
  }
}

/**
 * Implements hook_preprocess_views_view_field for views-view-field.html.twig.
 */
function cssn_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
  $field = $variables['field'];

  // Overwrite cssn directory on /community/cssn/directory.
  if ($view->id() == 'cssn_directory' && $view->current_display == 'page_1' && $field->options['id'] == 'nothing') {
    $output = $variables['output']->__toString();
    $lines = explode("\n", $output);
    $new_output = '';
    $badges = "";
    foreach ($lines as $key => $line) {
      if ($key == 0) {
        $lines = explode(', ', $line);
        if (!empty($lines[0])) {
          foreach ($lines as $key => $line) {
            $term_id = $line;
            if (\Drupal\taxonomy\Entity\Term::load($term_id)->get('field_badge')->entity != NULL) {
              $name = \Drupal\taxonomy\Entity\Term::load($term_id)->get('name')->value;
              $image_alt = \Drupal\taxonomy\Entity\Term::load($term_id)->get('field_badge')->alt;
              $image_url = \Drupal\taxonomy\Entity\Term::load($term_id)->get('field_badge')->entity->getFileUri();
              $image = \Drupal::service('file_url_generator')->generateAbsoluteString($image_url);
              if ($image) {
                $badges .= "<img src='$image' alt='$image_alt' title='$name' class='ms-2 mb-1' width='35' height='35' />";
              }
            }
          }
        }
      } elseif ($line == "!!!!=-=-= This line is programmatically replaced, if you change anything in this line you'll break badges. See cssn.module to fix any issues =-=-=-=-!!!!") {
        $new_output .= $badges;
      } else {
        $new_output .= $line;
      }
    }
    $variables['output'] = Markup::create($new_output);
  }
}

/**
 * Implements hook_block_access().
 *
 * Show welcometothecssn block to people in the ACCESS CSSN program/region.
 * Show jointhecssn block to other people.
 */
function cssn_block_access(Block $block, $operation, AccountInterface $account) {
  if ($block->getPluginId() == 'block_content:58e0d082-2224-43c2-a911-c41e5afc47b9') {
    // if the User is part of the ACCESS CSSN program, show the welcome block.
    $current_user = \Drupal::currentUser();
    if ($current_user->isAnonymous()) {
      return AccessResult::forbidden();
    }
    $user = User::load($current_user->id());
    $regions = $user->get('field_region')->getValue();
    foreach ($regions as $region) {
      // ACCESS CSSN term id = 780.
      if ($region['target_id'] == '780') {
        return AccessResult::allowed();
      }
    }
    return AccessResult::forbidden();
  }
  // Show jointhecssn block to other people.
  if ($block->getPluginId() == 'block_content:eedf2b47-d6e0-40d9-9a83-1de706df2843') {
    $current_user = \Drupal::currentUser();
    if ($current_user->isAnonymous()) {
      return AccessResult::allowed();
    }
    $user = User::load($current_user->id());
    $regions = $user->get('field_region')->getValue();
    foreach ($regions as $region) {
      // ACCESS CSSN term id = 780.
      if ($region['target_id'] == '780') {
        return AccessResult::forbidden();
      }
    }
    return AccessResult::allowed();
  }
}

/**
 * Return a list of selectable roles for CSSN form.
 */
function cssn_get_roles_array() {
  return [
    "mentor",
    "student",
    "research_computing_facilitator",
    "research_software_engineer",
    "ci_systems_engineer",
    "researcher",
  ];
}

/**
 * Implements hook_form_alter().
 */
function cssn_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Handle role forms.
  if (
    $form_id == 'webform_submission_edit_your_cssn_roles_add_form' ||
    $form_id == 'webform_submission_edit_your_cssn_roles_edit_form'
  ) {
    // Set submit action.
    $form['actions']['submit']['#submit'][] = 'cssn_role_form_submit';

    // Update form's check marks for roles in user's profile.
    $user = \Drupal::currentUser();
    $user_roles = array_intersect($user->getRoles(), cssn_get_roles_array());
    $form['elements']['roles_']['#default_value'] = $user_roles;

    // Update form's academic status.
    cssn_form_update_academic_status($form);
  }

  // Handle join cssn forms.
  if (
    $form_id == 'webform_submission_join_the_cssn_network_node_6111_add_form' ||
    $form_id == 'webform_submission_join_the_cssn_network_node_6111_edit_form'
  ) {
    // Update form's check marks for roles in user's profile.
    $fields_to_roles = [
      'cssn' => 'General Member',
      'mentor' => 'MATCHPlus Mentor',
      'student' => 'Student-Facilitator',
      'consultant' => 'Premier Consultant',
      'cip' => 'NSF-funded CIP',
    ];
    $user = \Drupal::currentUser();
    $roles = $user->getRoles();
    $roles_set = [];
    foreach ($fields_to_roles as $field => $role) {
      if (in_array($field, $roles)) {
        $roles_set[] = $role;
      }
    }

    $form['elements']['i_am_joining_as_a_']['#default_value'] = $roles_set;

    $user_loaded = \Drupal::entityTypeManager()->getStorage('user')->load($user->id());
    // Get user's field_region.
    $regions = $user_loaded->get('field_region')->getValue();
    $cssn_member = 0;
    foreach ($regions as $region) {
      if ($region['target_id'] == '780') {
        $cssn_member = 1;
        break;
      }
    }

    $form['elements']['cssn_member']['#default_value'] = $cssn_member;

    /*
     * Handle case where user has roles but no "ACCESS CSSN" region.
     * This could happen if the user selects a CSSN role through
     * the edit_cssn_roles form.
     */
    // Lookup taxonomy term id by name 'ACCESS CSSN'.
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['name' => 'ACCESS CSSN']);
    $term = reset($term);
    $term_id = $term->id();
    $role_program_sorter = new RoleProgramSorter($user);
    $region_set = $role_program_sorter->lookupRegion($term_id);
    if ($form_id == 'webform_submission_join_the_cssn_network_add_form' && $roles_set && !$region_set) {
      \Drupal::messenger()->addMessage(t('The boxes checked below reflect your current roles, please select \'General Member\' and submit this form to participate in the CSSN.'), 'warning');
    }

    // Set submit action.
    $form['actions']['submit']['#submit'][] = 'cssn_form_submit';

    // Update form's academic status.
    cssn_form_update_academic_status($form);
  }
}

/**
 * Initialize form element academic status.
 */
function cssn_form_update_academic_status(&$form) {
  $user = \Drupal::currentUser();
  $account = User::load($user->id());
  $academic_status = $account->field_academic_status->getValue();
  $academic_status = count($academic_status) ? $academic_status[0]['value'] : NULL;
  $form['elements']['academic_status_select2']['#default_value'] = $academic_status;
}

/**
 * Implements hook_form_submit().
 */
function cssn_role_form_submit(&$form, FormStateInterface $form_state) {

  $form_roles = cssn_get_roles_array();
  $user = \Drupal::currentUser();
  $role_program_sorter = new RoleProgramSorter($user);
  foreach ($form_roles as $role) {
    $set_role = in_array($role, $form['elements']['roles_']['#value']);
    if ($set_role) {
      $role_program_sorter->addRole($role);
    }
    else {
      $role_program_sorter->removeRole($role);
    }
  }

  // If 'student' is selected, update academic status.
  if (in_array("student", $form['elements']['roles_']['#value'])) {
    cssn_update_academic_status($user, $form);
  }
}

/**
 * Implements hook_form_submit().
 */
function cssn_form_submit(&$form, FormStateInterface $form_state) {
  $elements = $form['elements']['i_am_joining_as_a_'];
  $general = $elements['General Member']['#checked'];
  $match_mentor = $elements['MATCHPlus Mentor']['#checked'];
  $student_facilitator = $elements['Student-Facilitator']['#checked'];
  $premier_consultant = $elements['Premier Consultant']['#checked'];
  $cip = $elements['NSF-funded CIP']['#checked'];
  // Lookup taxonomy term id by name 'ACCESS CSSN'.
  $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['name' => 'ACCESS CSSN']);
  $term = reset($term);
  $term_id = $term->id();
  $enroll_program = FALSE;
  if ($general || $match_mentor || $student_facilitator || $premier_consultant || $cip) {
    $enroll_program = TRUE;
  }
  $user = \Drupal::currentUser();
  cssn_role_region('cssn', $general, $term_id, $enroll_program, $user);
  cssn_role_region('mentor', $match_mentor, $term_id, $enroll_program, $user);
  cssn_role_region('student', $student_facilitator, $term_id, $enroll_program, $user);
  cssn_role_region('consultant', $premier_consultant, $term_id, $enroll_program, $user);
  cssn_role_region('cip', $cip, $term_id, $enroll_program, $user);

  if ($student_facilitator) {
    cssn_update_academic_status($user, $form);
  }
}

/**
 * Update user's academic status.
 */
function cssn_update_academic_status($user, $form) {
  $academic_status = $form['elements']['academic_status_select2']['#value'];
  $account = User::load($user->id());
  $account->field_academic_status->setValue($academic_status);
  $account->save();
}

/**
 * Set or remove role and region and add badge for CSSN.
 */
function cssn_role_region($role, $checked, $term_id, $enroll_program, $user) {
  $role_program_sorter = new RoleProgramSorter($user);
  $scipe_badge = \Drupal::service('access_badges.badgeTools')->getBadgeTid('SCIPE Awardee');

  // Lookup user field 'field_user_badges'.
  $user = User::load($user->id());
  $badgetid = $user->get('field_user_badges')->getValue();

  if ($checked) {
    if (!empty($role)) {
      $role_program_sorter->addRole($role);
      if ($role == 'cssn') {
        $badgetid[] = ['target_id' => $scipe_badge];
        $user->set('field_user_badges', $badgetid);
        $user->save();
      }
      // Flag user as part of the CSSN Affinity Group.
      $cssn_affinity_group = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadByProperties(['tid' => 794]);
      $cssn_affinity_group = reset($cssn_affinity_group);
      $flag_id = 'affinity_group';
      $flag = \Drupal::service('cssn.flag');
      $set_flag = $flag->setFlag($flag_id, $cssn_affinity_group, $user);
      if ($set_flag) {
        \Drupal::messenger()->addMessage(t('You have been added to the CSSN Affinity Group.'));
      }
    }
    if ($enroll_program) {
      $role_program_sorter->addFieldRegion($term_id);
    }
  }
  else {
    if (!empty($role)) {
      $role_program_sorter->removeRole($role);
      if ($role == 'cssn') {
        $badge_unset = FALSE;
        foreach ($badgetid as $key => $badge) {
          if ($badge['target_id'] == $scipe_badge) {
            unset($badgetid[$key]);
            $badge_unset = TRUE;
          }
        }
        if ($badge_unset) {
          $user->set('field_user_badges', $badgetid);
          $user->save();
        }
      }
    }
    if ($enroll_program === FALSE) {
      $role_program_sorter->removeFieldRegion($term_id);
    }
  }
}

/**
 * Implements hook_entity_update().
 * Invalidate community persona caching when user is updated.
 */
function cssn_entity_update(EntityInterface $entity) {
  $type = $entity->bundle();
  if ($type == 'user') {
    \Drupal::service('cache_tags.invalidator')->invalidateTags(['community_persona']);
  }
}
