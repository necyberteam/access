<?php

use \Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Form\FormStateInterface;
use \Drupal\node\Entity\Node;
use \Drupal\user\Entity\User;

/**
 * Implements hook_form_alter().
 *
 * Provide custom validation for ACCESS New and Recurring Events
 */
function access_news_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_access_news_edit_form' || $form_id == 'node_access_news_form' || $form_id == 'eventseries_default_add_form' || $form_id == 'eventseries_default_edit_form') {

    $form['#validate'][] = 'access_news_validate';
  }
}

/**
 * Custom validation callback.
 *
 * Require that the person adding an Affinity Group
 * is a Coordinator of that Affinity Group.
 *
 * Also, check that the Affinity Group taxonomy term exists.
 */
function access_news_validate(&$form, FormStateInterface $form_state) {
  // Require that the person saving is an Affinity Group Coordinator
  // if an Affinity Group is selected for ACCESS News.
  $user = User::load(\Drupal::currentUser()->id());
  $ag_node_array = $form_state->getValue('field_affinity_group_node');
  // Valid values are arrays with non-null 'target-id' value
  foreach ($ag_node_array as $ag_node) {
    if (is_array($ag_node)) {
      $nid = $ag_node['target_id'];
      if ($nid) {
        $authorized = FALSE;
        $n = \Drupal\node\Entity\Node::load($nid);
        // administrator can assign ACCESS News to any Affinity Group
        if (in_array('administrator', \Drupal::currentUser()->getRoles())) {
          $authorized = TRUE;
        } else {
          // Load coordinator(s) for the Affinity Group
          $coordinator_field = $n->get('field_coordinator');
          if ($coordinator_field) {
            $coordinators = $coordinator_field->getValue();
            foreach ($coordinators as $coordinator) {
              if ($coordinator['target_id'] == $user->get('uid')->value) {
                $authorized = TRUE;
              }
            }
          }
        }
        // Check that the Affinity Group term exists
        $name = $n->get('title')->value;
        $vid = 'affinity-group';
        $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['name' => $name]);
        if (!$term) {
          $form_state->setErrorByName('access_news', t('The Affinity Group taxonomy term ' . $name . ' does not exist. Please contact an administrator.'));
        }
        if (!$authorized) {
          $form_state->setErrorByName('access_news', t('You are not a Coordinator for the ' . $n->get('title')->value . ' Affinity Group.'));
        }
      }
    }
  }
}

/**
 * Implements hook_node_presave().
 *
 * Set the Affinity Group taxonomy term based on the
 * Affinity Group node so people only have to select it once.
 */
function access_news_node_presave(Node $node) {
  $type = $node->bundle();
  if ( $type == 'access_news' ) {
    update_affinity_group($node);
  }
}

/**
 * Implements hook_entity_presave().
 *
 * Set the Affinity Group taxonomy term based on the
 * Affinity Group node so people only have to select it once.
 */
function access_news_entity_presave(EntityInterface $entity) {
  $type = $entity->getEntityTypeId();
  if ( $type == 'eventseries' ) {
    update_affinity_group($entity);
  }
}

/**
 * Set Affinity Group taxonomy terms based on the Affinity Group node field
 */
function update_affinity_group($node) {
  $ag_node_array = $node->get('field_affinity_group_node');
  $node->set('field_affinity_group', NULL);
  foreach ($ag_node_array as $ag_node) {
    // Get the Affinity Group node
    $nid = $ag_node->getValue()['target_id'];
    $ag = \Drupal\node\Entity\Node::load($nid);
    $name = $ag->get('title')->value;
    // Get the term with the same name as the Affinity Group
    $vid = 'affinity-group';
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['name' => $name]);
    $node->get('field_affinity_group')->appendItem(array_key_first($term));
  }
}

/**
 * Implements hook_node_insert().
 *
 * Provide message that approval is required
 */
function access_news_node_insert(Node $node) {
  $type = $node->bundle();
  if ($type == 'access_news') {
    // Send admins a message if an ACCESS News node is created
    // and needs approval for publication.

    if (!$node->isPublished()) {
      $allowed_roles = ['administrator', 'affinity_group_leader'];
      if (!in_array($allowed_roles, \Drupal::currentUser()->getRoles())) {
        $message = t('Thank you for submitting your news. Please change the state to "Ready for Review" when you would like to publish it.');
        \Drupal::messenger()->addMessage($message);
      }
    } else {
      // For published news: Check if broadcast to listed AGs desired, do it if so
      affinityGroupBroadcast($node, true);
    }
  }
}

/**
 * Implements hook_entity_insert().
 *
 *  * Provide message that approval is required
 */
function access_news_entity_insert(EntityInterface $entity) {

  $type = $entity->getEntityTypeId();
  if ( $type == 'eventseries' ) {
    if (!$entity->isPublished()) {
      $allowed_roles = ['affinity_group_leader'];
      if (!in_array($allowed_roles, \Drupal::currentUser()->getRoles())) {
        $message = t('Thank you for submitting your event. Please change the state to "Ready for Review" when you would like to publish it.');
        \Drupal::messenger()->addMessage($message);
      }
    } else {
      // For published event: Check if broadcast to listed AGs desired, do it if so
      affinityGroupBroadcast($entity, false);
    }
  }
}

function access_news_entity_update(Drupal\Core\Entity\EntityInterface $node) {

  $type = $node->bundle();
  if ($type != 'access_news') {
    $type = $node->getEntityTypeId();
  }
  // todo: possible want to allow broadcast on an individual event as well.
  //if ($type == 'access_news' || $type == 'eventseries' || $type == 'eventinstance') {
  if ($type == 'access_news' || $type == 'eventseries') {

    if ($node->isPublished()) {
      affinityGroupBroadcast($node, $type);
    }
  }
}
/**
 * Send email to constant contact email list of chosen Affinity Groups
 *  if both:
 * 1) option to BroadcastToAffinityGroup is checked
 * 2) at least one affinity group specified
 *
 * Should also be in published state, but that is checked before we get here.
 * After send attempt, uncheck the broadcast option.
 * Meant to be used by both News items and Events Series
 * (TODO - event instances TDB)
 * $newsType is eventseries or access_news (or tdb: eventinstance)
 */
function affinityGroupBroadcast(Drupal\Core\Entity\EntityInterface $node, $newsType) {

  $getFields = $node->getFields();
  $broadcastArray = $getFields['field_broadcast_affinity_groups']->getValue();
  $broadcastToAGs = $broadcastArray[0]['value'];

  // find the node ids for the AGs.  If AGs have been specified, get the
  // corresponding Constant Contact email list ids from the nodes.
  if ($broadcastToAGs) {
    $agNodes = $node->get('field_affinity_group_node');
    if (count($agNodes)) {
      $ccListIdArray = array();
      $agNames = array();

      // collect ag name and cc email list id
      foreach ($agNodes as $agNode) {

        $nid = $agNode->getValue()['target_id'];
        $ag = \Drupal\node\Entity\Node::load($nid);

        $name = $ag->get('title')->value;
        array_push($agNames, $name);

        $ccListId = $ag->get('field_list_id')->value;
        array_push($ccListIdArray, $ccListId);
      }

      if (!count($ccListIdArray)) {
          showStatus("Missing Constant Contact Email List Id for Affinity Group");
      } else {
        // gather items to insert into the email template
        $titleArray = $getFields['title']->getValue();
        $title = $titleArray[0]['value'];

        $newsUrl = $node->toUrl()->setAbsolute()->toString();

        // set pubDate and body; news / eventseries different
        if ($newsType=='access_news') {
          $pubDateArray = $getFields['field_published_date']->getValue();
          $pubDate = $pubDateArray[0]['value'];
          $date = date_create_from_format('Y-m-d', $pubDate);
          $pubDate = date_format($date, 'm-d-Y');   // reverse the date

          $bodyArray = $getFields['body']->getValue();
          $body = $bodyArray[0]['value'];
        } else {
          // newstype is eventseries.
          // todo temp can't figure out how to get the timestamp or publish date
          // because kint crashes on eventseries (but not event instance)
          //$pubDateArray = $getFields['revision_timestamp']->getValue();
          //$pubDate = $pubDateArray[0];
          //$date = date_create_from_format('Y-m-d', $pubDate);
          //$pubDate = date_format($date, 'm-d-Y');
          $pubDate = date('m-d-Y');

          // body set using a custom view mode: ccemail
          $view_builder = \Drupal::entityTypeManager()->getViewBuilder('eventseries');
          $renderArray = $view_builder->view($node, 'ccemail');
          $body = \Drupal::service('renderer')->renderPlain($renderArray);
        }

        // Now emailing the group; set option broadcast off. If user wants to email again after
        // and edit, they will need to check the box again.
        $node->set('field_broadcast_affinity_groups', [0]);
        $node->save();
        emailToAffinityGroups($body, $title, $pubDate, $agNames, $newsUrl, $ccListIdArray);
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function access_news_theme($existing, $type, $theme, $path): array {
  return [
    'requestnews_block' => [
      'variables' => [
      ]
    ],
  ];
}
