<?php

/**
 * @file
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Link;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_views_pre_render().
 */
function access_cilink_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'search_ci_links' && isset($view->getDisplay()->view->element['#display_id']) && ($view->getDisplay()->view->element['#display_id'] == 'page_1' || $view->getDisplay()->view->element['#display_id'] == 'page_2')) {
    $view->element['#attached']['library'][] = 'access_cilink/cilink_view';
    $view->element['#attached']['library'][] = 'access_misc/copyclip';
  }
}

/**
 * Implements hook_views_post_render().
 */
function access_cilink_views_post_render(ViewExecutable $view) {
  // Override view /admin/structure/views/view/resources/edit/page_2 title.
  if ($view->id() == 'resources' && isset($view->getDisplay()->view->element['#display_id']) && $view->getDisplay()->view->element['#display_id'] == 'page_2') {
    $tid = $view->getTitle();
    if (term::load($tid)) {
      $title = 'Resources tagged ' . term::load($tid)->get('name')->value;
      // Set the view title.
      $view->setTitle($title);
      // Set the route title.
      $route = \Drupal::routeMatch()->getCurrentRouteMatch()->getRouteObject();
      $route->setDefault('_title', $title);
    }
  }
  if ($view->id() == 'resource' && isset($view->getDisplay()->view->element['#display_id']) && $view->getDisplay()->view->element['#display_id'] == 'page_1') {
    $url = \Drupal::request()->getRequestUri();
    $url_chunked = explode('/', $url);
    $title = 'Ci Link';
    if (is_numeric($url_chunked[2])) {
      $sid = $url_chunked[2];
      $webform_submission = \Drupal::entityTypeManager()->getStorage('webform_submission')->load($sid);
      // Get title field from webform submission.
      $webform_title = $webform_submission->getData('title');
      $title = $webform_title['title'];
    }
    $view->setTitle($title);
  }
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function access_cilink_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];

  $field = $variables['field'];
  // Override view /admin/structure/views/view/search_ci_links title.
  // Details output on CI links search on /search-ci-links page.
  if ($view->id() == 'search_ci_links' && (($view->current_display == 'page_1' || $view->current_display == 'page_2') && $field->options['id'] == 'sid_3')) {
    $token = \Drupal::token();
    $domainName = Html::getClass($token->replace(t('[domain:name]')));

    $sid = $variables['output']->__toString();
    $webform_submission = \Drupal::entityTypeManager()->getStorage('webform_submission')->load($sid);
    if (!$webform_submission) {
      return;
    }
    $data = $webform_submission->getData();
    $title = $data['title'];
    $description = $data['description'];
    $type = $data['category'];

    // Get terms from webform submission.
    $webform_terms = $data['terms'];
    $webform_terms = explode(', ', $webform_terms);
    $terms = [];
    foreach ($webform_terms as $term) {
      // Match tid.
      preg_match_all('!\d+!', $term, $matches);
      $terms[] = $matches[0][0];
    }

    $tags = '<div class="[&amp;_a]--inline-block [&amp;_a]--no-underline [&amp;_a]--font-normal [&amp;_a]--my-1 [&amp;_a]--me-1 [&amp;_a]--mr-1 [&amp;_a]--px-2 [&amp;_a]--py-1 [&amp;_a]--hover--border-dark-teal [&amp;_a]--border [&amp;_a]--whitespace-nowrap">';
    foreach ($terms as $term) {
      $term = Term::load($term);
      if ($term == NULL) {
        continue;
      }
      $term_name = $term->getName();
      $tags .= "<a class='me-1' href='/tags/$term_name'>$term_name</a>";
    }
    $tags .= '</div>';

    // Resource links.
    $link_to_resource = '<ul class="list-none mb-5 mx-0 p-0">';
    $link_color = $domainName == 'ccmnet' ? 'text-dark' : 'text-dark-teal';
    foreach ($data['link_to_resource'] as $link) {
      $link_to_resource .= "<li class='list-image-link'><a href='" .
        $link['url'] .
        "' class='$link_color text-lg no-underline hover--underline font-semibold'>" .
        $link['title'] . "</a></li>";
    }
    $link_to_resource .= '</ul>';

    // Upvote widget.
    $flag_upvote = \Drupal::service('flag.link_builder')->build('webform_submission', $sid, 'upvote');
    $flag_upvote = \Drupal::service('renderer')->renderPlain($flag_upvote);
    $flag_upvote = "<div class=''>$flag_upvote</div>";
    $flag_upvote_count = \Drupal::service('flag.count')->getEntityFlagCounts($webform_submission);
    $flag_upvote_set = $flag_upvote_count['upvote'] ?? 0;
    $flag_upvote_count = $flag_upvote_set ? $flag_upvote_count['upvote'] : 0;

    $likes_count = "<span class='text-[32px] inline-block text-center me-2' style='min-width: 32px;'>$flag_upvote_count</span>";
    $likes = $flag_upvote_count == 1 ? "<span>Like</span>" : "<span>Likes</span>";
    // If User is not logged in, show the login link.
    if (\Drupal::currentUser()->isAnonymous()) {
      $options = [
        'query' => ['destination' => \Drupal::request()->getRequestUri()],
        'attributes' => ['class' => ['text-dark-teal', 'no-underline', 'hover--underline']],
      ];
      $login = Link::fromTextAndUrl('Login to like', Url::fromUri('internal:/user/login', $options))->toString();

      $flag_upvote = "<div class=''>
                        <i class='fa-light fa-right-to-bracket text-dark-teal text-[32px] w-9 me-2'></i>
                        <br> " . $login . "
                      </div>";
    }
    $likes_html_class = $domainName == 'ccmnet' ? 'mb-2' : 'mb-5';
    $likes_html = "<div class='$likes_html_class text-dark-teal font-bold'>$likes_count $likes</div>";

    $likes_class = $domainName == 'ccmnet' ? '' : 'bg-light-teal p-4';
    $likes_output_html = "<div class='$likes_class font-bold md--w-full'>$likes_html $flag_upvote</div>";

    // Skills.
    $skill_id = $data['skill_level'];
    $skill_list = [];
    foreach ($skill_id as $id) {
      // Drupal 10 lookup skill_level by tid.
      $term = Term::load($id);
      if ($term == NULL) {
        continue;
      }
      $term_name = $term->getName();
      $skill_list[] = $term_name;
    }
    $skill_image = \Drupal::service('access_misc.skillLevel')->getSkillsImage($skill_list);

    // Flags.
    $flag_classes = 'no-underline text-dark-teal hover--underline';
    $flag_outdated = \Drupal::service('flag.link_builder')->build('webform_submission', $sid, 'outdated');
    $flag_outdated['#attributes']['class'][] = $flag_classes;
    $flag_outdated = \Drupal::service('renderer')->renderPlain($flag_outdated);
    $flag_not_useful = \Drupal::service('flag.link_builder')->build('webform_submission', $sid, 'not_useful');
    $flag_not_useful['#attributes']['class'][] = $flag_classes;
    $flag_not_useful = \Drupal::service('renderer')->renderPlain($flag_not_useful);
    $flag_inaccurate = \Drupal::service('flag.link_builder')->build('webform_submission', $sid, 'inaccurate');
    $flag_inaccurate['#attributes']['class'][] = $flag_classes;
    $flag_inaccurate = \Drupal::service('renderer')->renderPlain($flag_inaccurate);

    // Get full url including domain.
    $url = \Drupal::request()->getSchemeAndHttpHost() . '/knowledge-base/resources?f%5B0%5D=submission_id%3A' . $sid;

    // Check if the user is logged in.
    $user = \Drupal::currentUser();
    $authenticated = $user->isAuthenticated();

    $output['string'] = [
      '#type' => 'inline_template',
      '#template' => '<div class="details-wrap relative">
                        <button class="copyclip ms-4 absolute top-4 right-28 z-10" onclick="copyclip(\'{{ link_url }}\', event)">
                          <span class="default-message block leading-5 text-dark-teal">
                            <i class="fa-solid fa-link"></i><br />
                            Copy link
                          </span>
                          <span class="copied-message text-dark-teal hidden d-none">
                            <i class="fa-solid fa-check"></i><br />
                            Copied!
                          </span>
                        </button>
                        <details class="search-ci-links">
                          <summary class="flex items-center bg-light-teal p-4 relative after:right-8">
                            <div class="text-dark-teal m-0 pe-20 font-bold text-lg">{{ title }}</div>
                            <div class="linkcount bg-white text-orange font-bold py-2 px-4 rounded-full ms-auto me-10 ml-auto border round border-radius">{{ likesCount }}</div>
                            {% if domainName == "ccmnet" %}
                              <i class="fa-solid fa-chevron-down ml-3"></i>
                            {% endif %}
                          </summary>
                          <div class="grid grid-cols-5 gap-4 p-4">
                            <div class="col-span-5 md--col-span-4">
                              {{ linkToResource | raw }}
                              {{ description }}
                              <div class="square-tags">{{ tags | raw }}</div>
                            </div>
                            <div class="col-span-5 md--col-span-1 flex flex-row flex-wrap justify-between">
                              {{ likesOutput | raw }}
                              <div class="px-2">
                                <div class="text-dark-teal m-0 pt-3 font-bold text-lg">
                                  {{ typeTitle }}
                                </div>
                                <div>
                                  {{ type }}
                                </div>
                              </div>
                              <div class="px-2">
                                <div class="text-dark-teal m-0 pt-3 font-bold text-lg">
                                  {{ skillTitle }}
                                </div>
                                <div>
                                  {{ skillImage | raw }}
                                </div>
                              </div>
                              {% if authenticated %}
                                <div class="pt-4 md--w-full">
                                  <details class="border border-solid border-dark-teal open:bg-white duration-300 relative">
                                    <summary class="ps-2 pe-10 py-2 text-dark-teal leading-5 uppercase">
                                      {{ report }}
                                    </summary>
                                    <ul class="px-2 mb-2">
                                      <li>{{ flagOutdated }}</li>
                                      <li>{{ flagNotUseful }}</li>
                                      <li>{{ flagInaccurate }}</li>
                                    </ul>
                                  </details>
                                </div>
                              {% endif %}
                            </div>
                          </div>
                        </details>
                      </div>',
      '#context' => [
        'title' => $title,
        'link_url' => $url,
        'tags' => $tags,
        'typeTitle' => t('Type'),
        'type' => $type,
        'skillTitle' => t('Level'),
        'skillImage' => $skill_image,
        'description' => $description,
        'linkToResource' => $link_to_resource,
        'likesCount' => $flag_upvote_count,
        'likesOutput' => $likes_output_html,
        'report' => $domainName == 'accesssupport' ? t('Flag as') :  t('Flag as <i class="fa-solid fa-chevron-down ml-3"></i>'),
        'authenticated' => $authenticated,
        'flagOutdated' => $flag_outdated,
        'flagNotUseful' => $flag_not_useful,
        'flagInaccurate' => $flag_inaccurate,
        'domainName' => $domainName,
      ],
    ];

    $variables['output'] = $output;
  }
  // Override view /admin/structure/views/view/resources/edit/page_1 sid_2.
  // Shows up as affinity group on /ci-links page.
  if ($view->id() == 'resources' && ($view->current_display == 'page_1' || $view->current_display == 'page_3') && $field->options['id'] == 'sid_2') {
    $sid = $variables['output'];
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'affinity_group')
      ->condition('field_resources_entity_reference', $sid)
      ->accessCheck(FALSE);
    $nids = $query->execute();
    $affinity_nodes = '';
    foreach ($nids as $nid) {
      // Get node title.
      $node = Node::load($nid);
      $title = $node->getTitle();
      $affinity_nodes .= '<a href="/node/' . $nid . '">' . $title . '</a>, ';
    }
    $affinity_nodes = rtrim($affinity_nodes, ', ');

    $variables['output'] = Markup::create($affinity_nodes);
  }
  // Override view /admin/structure/views/view/resource/edit/page_1 sid_2.
  // Shows up as affinity group on /ci-links/%sid page.
  if ($view->id() == 'resource' && ($view->current_display == 'page_1' || $view->current_display == 'page_3')) {
    if ($field->options['id'] == 'webform_submission_value') {
      $html = $variables['output'];

      // Regular expression pattern to match the "[[REPLACE]]:473" string.
      $pattern = '/\[\[REPLACEAFFINITY\]\]:(\d+)/';

      // Match and extract the number using preg_match for Affinity Groups.
      if (preg_match($pattern, $html, $matches)) {
        $sid = $matches[1];
        $query = \Drupal::entityQuery('node')
          ->condition('type', 'affinity_group')
          ->condition('field_resources_entity_reference', $sid)
          ->accessCheck(FALSE);
        $nids = $query->execute();
        $affinity_nodes = '';
        if ($nids) {
          $affinity_nodes = '<h4>Affinity Group</h4>';
        }
        foreach ($nids as $nid) {
          // Get node title.
          $node = Node::load($nid);
          $title = $node->getTitle();
          $affinity_nodes .= '<a href="/node/' . $nid . '">' . $title . '</a>, ';
        }
        $replaced_text = rtrim($affinity_nodes, ', ');

        $html = preg_replace($pattern, $replaced_text, $html);
      }

      // Regular expression pattern to match the "[[REPLACE]]:473" string.
      $pattern = '/\[\[REPLACE\]\]:(\d+)/';

      // Match and extract the number using preg_match for report flags.
      if (preg_match($pattern, $html, $matches)) {
        $sid = $matches[1];
        $flag_outdated = \Drupal::service('flag.link_builder')->build('webform_submission', $sid, 'outdated');
        $flag_outdated['#attributes']['class'][] = 'dropdown-item';
        $flag_outdated = \Drupal::service('renderer')->renderPlain($flag_outdated);
        $flag_not_useful = \Drupal::service('flag.link_builder')->build('webform_submission', $sid, 'not_useful');
        $flag_not_useful['#attributes']['class'][] = 'dropdown-item';
        $flag_not_useful = \Drupal::service('renderer')->renderPlain($flag_not_useful);
        $flag_inaccurate = \Drupal::service('flag.link_builder')->build('webform_submission', $sid, 'inaccurate');
        $flag_inaccurate['#attributes']['class'][] = 'dropdown-item';
        $flag_inaccurate = \Drupal::service('renderer')->renderPlain($flag_inaccurate);

        $replaced_text = "<li>$flag_outdated</li><li>$flag_not_useful</li><li>$flag_inaccurate</li>";

        // Replace the matched string with the variable value.
        $updatedHtml = preg_replace($pattern, $replaced_text, $html);
        $output = Markup::create($updatedHtml);
        $variables['output'] = $output;
      }
    }
  }
}

/**
 * Implements hook_mail().
 */
function access_cilink_mail($key, &$message, $params) {
  switch ($key) {
    case 'cilink_resources':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
  }
}

/**
 * Build Resource Email.
 */
function access_cilink_resource_email() {
  $header = [
    'resource' => 'Resource title',
    'flags' => 'Flags',
  ];
  $rows = [];
  $flag_resources = \Drupal::state()->get('resource_flags');
  foreach ($flag_resources as $sid => $flag_resource) {
    if ($flag_resource['today']) {
      $flag = '';
      if (isset($flag_resource['not_useful'])) {
        $flag .= t('not_useful') . " " . $flag_resource['not_useful'] . "<br>";
      }
      if (isset($flag_resource['outdated'])) {
        $flag .= t('outdated') . " " . $flag_resource['outdated'] . "<br>";
      }
      if (isset($flag_resource['inaccurate'])) {
        $flag .= t('inaccurate') . " " . $flag_resource['inaccurate'] . "<br>";
      }
      // Webform lookup by submission id $sid.
      $webform_submission = \Drupal::entityTypeManager()->getStorage('webform_submission')->load($sid);
      $webform_title = $webform_submission->getWebform()->label();
      // Link to webform submission.
      $webform_submission_link = \Drupal::service('link_generator')
        ->generate($webform_submission->label(), $webform_submission->toUrl());
      $rows[] = [
        'resource' => [
          'data' => [
            '#markup' => $webform_submission_link->getGeneratedLink(),
          ],
        ],
        'flags' => [
          'data' => [
            '#markup' => $flag,
          ],
        ],
      ];
      // Reset today to 0 after processing.
      $flag_resources[$sid]['today'] = 0;
      \Drupal::state()->set('resource_flags', $flag_resources);
    }
  }

  if (!empty($rows)) {
    $body = t('The following resources have been flagged as inaccurate, not useful, or outdated.');
    $html['ask-ci'] = [
      '#theme' => 'table',
      '#prefix' => "<p>$body</p>",
      '#header' => $header,
      '#rows' => $rows,
      '#attributes' => ['id' => 'ask-ci', 'class' => ['border-0']],
    ];
    $output = \Drupal::service('renderer')->renderPlain($html);

    // Lookup users by role.
    $uids = \Drupal::entityQuery('user')
      ->condition('status', 1)
      ->condition('roles', 'kb_pm')
      ->accessCheck(FALSE)
      ->execute();
    $to_email = '';
    foreach ($uids as $uid) {
      $user = User::load($uid);
      $to_email .= $user->getEmail() . ',';
    }
    // Remove the last comma.
    $to_email = rtrim($to_email, ',');

    $params = [];
    $params['to'] = $to_email;
    $params['body'] = $output;
    $params['subject'] = t('CI Links flagged');
    cilink_send('cilink_resources', $params);
  }
}

/**
 * Send email.
 */
function cilink_send($key, $params) {
  $to = $params['to'];
  $langcode = \Drupal::currentUser()->getPreferredLangcode();
  $send = TRUE;
  $module = 'access_cilink';
  $mailManager = \Drupal::service('plugin.manager.mail');
  $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
  return $result;
}

/**
 * Implements hook_form_alter().
 */
function access_cilink_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'webform_submission_resource_add_form' || $form_id == 'webform_submission_resource_edit_form') {
    $form['actions']['submit']['#submit'][] = 'access_cilink_webform_submission_resource_submit';
  }
}

/**
 * Webform submission resource submit.
 */
function access_cilink_webform_submission_resource_submit($form, \Drupal\Core\Form\FormStateInterface $form_state) {
  // Get current user.
  $user = \Drupal::currentUser();
  $kb_one = \Drupal::service('access_badges.badgeTools')->getBadgeTid('KB Resource Contributor (1)');
  $kb_five = \Drupal::service('access_badges.badgeTools')->getBadgeTid('KB Resource Contributor (5)');
  $kb_ten = \Drupal::service('access_badges.badgeTools')->getBadgeTid('KB Resource Contributor (10)');
  // Look up webform submissions by user for the resource webform.
  $query = \Drupal::entityQuery('webform_submission')
    ->condition('webform_id', 'resource')
    ->condition('uid', $user->id())
    ->accessCheck(FALSE);
  $submission_ids = $query->execute();

  // Lookup user field 'field_user_badges'.
  $user = User::load($user->id());
  $badgetid = $user->get('field_user_badges')->getValue();

  if (count($submission_ids) == 1) {
    $badgetid[] = ['target_id' => $kb_one];
    $user->set('field_user_badges', $badgetid);
    $user->save();
  }
  if (count($submission_ids) == 5) {
    foreach ($badgetid as $key => $value) {
      if ($value['target_id'] == $kb_one) {
        unset($badgetid[$key]);
      }
    }
    $badgetid[] = ['target_id' => $kb_five];
    $user->set('field_user_badges', $badgetid);
    $user->save();
  }
  if (count($submission_ids) == 10) {
    foreach ($badgetid as $key => $value) {
      if ($value['target_id'] == $kb_five) {
        unset($badgetid[$key]);
      }
    }
    $badgetid[] = ['target_id' => $kb_ten];
    $user->set('field_user_badges', $badgetid);
    $user->save();
  }
}

/**
 * Implements hook_cron().
 */
function access_cilink_cron() {
  $run_email = FALSE;
  if ((date('G', time()) == 8) && (date('i', time()) < 15)) {
    $run_email = TRUE;
  }
  if ($run_email) {
    \Drupal::logger('access_cilinks')->notice('Running access_cilink email cron.');
    access_cilink_resource_email();
  }
}
