<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;

/**
 * @file
 * Module for affinity group.
 * 
 * Code in this module implements the following:
 *  - Coordinators for Affinity Groups have their
 *    "Affinity Group Leader" role updated
 *  - Whenever an Affinity Group is saved, a taxonomy term with the same
 *    name is created. 
 */

/**
 * Implements hook_entity_presave().
 *  - update AG Leader roles for added or removed coordinators
 *  - ensure every Affinity Group name has a corresponding taxonomy term.
 */
function access_affinitygroup_entity_presave(EntityInterface $entity)
{
  $type = $entity->bundle();
  if ($type == 'affinity_group') {

    update_ag_leader_roles($entity);

    add_ag_taxonomy_term($entity);
  }
}

/**
 *  - update AG Leader roles for added or removed coordinators
 */
function update_ag_leader_roles($entity)
{
  // get all coordinators for this AG
  $coordinators = $entity->get('field_coordinator')->getValue();

  // add 'affinity_group_leader' role to all coordinators
  $coordinator_ids = array();
  foreach ($coordinators as $coordinator) {
    $coordinator_id = $coordinator['target_id'];
    $coordinator_ids[] = $coordinator_id;
    $user = User::load($coordinator_id);

    $user->addRole('affinity_group_leader');
    $user->save();
  }

  // if removing a coordinator, remove the leader role (if not a leader anywhere else)
  update_removed_ag_leader_roles($entity, $coordinator_ids);
}

function update_removed_ag_leader_roles($entity, $coordinator_ids)
{
  // get the original list of coordinators 
  $original_coordinators = $entity->original
    ? $entity->original->get('field_coordinator')->getValue()
    : null;

  // build an array of all removed coordinators
  $removed_coordinator_ids = array();
  foreach ($original_coordinators as $original_coordinator) {
    $original_coordinator_id = $original_coordinator['target_id'];
    if (!in_array($original_coordinator_id, $coordinator_ids)) {
      $removed_coordinator_ids[] = $original_coordinator_id;

      // $msg = "user id $original_coordinator_id removed";
      // \Drupal::messenger()->addStatus($msg);
    }
  }

  // if any coordinators removed, possibly remove their leader role
  if (count($removed_coordinator_ids)) {

    // get all affinity group coordinators on other affinity groups

    $storage = \Drupal::service('entity_type.manager')->getStorage('node');
    $all_affinity_groups = $storage->loadByProperties([
      'type' => 'affinity_group'
    ]);

    $all_other_coordinator_ids = array();

    foreach ($all_affinity_groups as $affinity_group) {

      if ($entity->id() == $affinity_group->id()) {
        // \Drupal::messenger()->addStatus('in possibly remove, skipping group id = ' . $entity->id());
        continue;
      }
      $coordinators = $affinity_group->get('field_coordinator')->getValue();
      foreach ($coordinators as $coordinator) {
        $all_other_coordinator_ids[] = $coordinator['target_id'];;
      }
    }

    // \Drupal::messenger()->addStatus('all other ag coord ids = ' . print_r($all_other_coordinator_ids, true));
    // \Drupal::messenger()->addStatus('all removed coord ids = ' . print_r($removed_coordinator_ids, true));

    // foreach removed coordinator, 
    //    if not a coordinator on any other affinity group,
    //       remove the leader role

    foreach ($removed_coordinator_ids as $removed_coordinator_id) {
      $user = User::load($removed_coordinator_id);
      if (!in_array($removed_coordinator_id, $all_other_coordinator_ids)) {
        $user->removeRole('affinity_group_leader');
        $user->save();
        \Drupal::messenger()->addStatus('Removed Affinity Group Leader role for ' . $user->getAccountName());
      } else {
        \Drupal::messenger()->addStatus('Not removing Affinity Group Leader role for ' . $user->getAccountName()
          . ' because coordinator for another Affinity Group');
      }
    }
  }
}

function add_ag_taxonomy_term($entity)
{
  $ag_title = $entity->getTitle();
  $exists = !empty(ag_taxonomy_lookup($ag_title));
  if (!$exists) {
    create_ag_taxonomy_term($ag_title);
  }
  
  // set entity's field_affinity_group to new term
  $entity->set('field_affinity_group', $ag_title); 
}

function ag_taxonomy_lookup($ag_title)
{
  // ok to pass null -- returns null if $ag_title is null
  $lookup = taxonomy_term_load_multiple_by_name($ag_title, 'affinity_groups');
  return $lookup;
}

function create_ag_taxonomy_term($ag_title)
{
  Term::create([
    'vid' => 'affinity_groups',
    'name' => $ag_title,
  ])->save();
}
