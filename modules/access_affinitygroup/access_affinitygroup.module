<?php

use Drupal\access_affinitygroup\Plugin\ConstantContactApi;
use Drupal\user\UserInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\user\Entity\User;
use Drupal\Component\Utility\Xss;

/**
 * @file
 * Module for affinity group.
 * 
 * Each affinity group (AG) has a dedicated "List" in Constant Contact, and
 * each user is a Constant Contact "Contact". 
 * We add a user to CC when the user logs in, if they don't already have a
 * constant contact id stored on the user form.  
 * When a user Joins or Leaves an AG, we add or remove the user from
 * the corresponding CC list.
 * When an AG is edited or created, we add the list to CC if not already done.
 * Note: The list in Constant Contact is stored by the AG name, so relationship
 * to CC list is broken if AG name changes.
 *
 */

/**
 * Implements hook_node_insert().
 */
function access_affinitygroup_node_insert(EntityInterface $entity)
{
  $type = $entity->bundle();
  if ($type == 'affinity_group') {
    $get_fields = $entity->getFields();
    $title = $entity->getTitle();
    $summary = $get_fields['body']->summary;
    $post_data = [
      'name' => $title,
      'favorite' => 0,
      'description' => $summary
    ];
    $post_data = json_encode($post_data);
    // Create constant contact list for affinity group
    $created_list = $cca->apiCall('/contact_lists ', $post_data, 'POST');
    $list_id = Xss::filter($created_list->list_id);
    $entity->set('field_list_id', $list_id);
  }
}

/**
 * Implements hook_entity_presave(). 
 * Handles either
 * 1) User did Join on Affinity Group
 * 2) Admin user saved Affinity Group form
 */
function access_affinitygroup_entity_presave(EntityInterface $entity)
{ 
  
  $type = $entity->bundle();
  if ($type == 'affinity_group') {

    if (method_exists($entity, 'getFlaggableType')) {

      // user did Join
      
      $group_id = $entity->get('entity_id')->getValue()[0]['value'];

      $postJSON = makeListMembershipJSON($group_id);

      if (empty($postJSON)) {                
        showStatus("Can't add user to email list; check if user is missing Constant Contact ID.");        
      } else {
        $cca = new ConstantContactApi;
        $ccResponse = $cca->apiCall('/activities/add_list_memberships', $postJSON, 'POST');
      }    

    } else {

      // affinity group edit was saved by admin user.
      // If not already there, add list to constant contact.
      // TODO - should we skip all this if list_id already set
      // instead of checking for list of lists from CC?

      // get all existing lists

      $cca = new ConstantContactApi;
      $lists = $cca->apiCall('/contact_lists ');
      if (empty($lists)) {
        return;
      }

      //debug info: here you can see all lists CC knows about along with their List IDs
      //kint($lists);

      $list_exists = false;
      foreach ($lists->lists as $list) {
        if ($list->name == $title) {
          $list_exists = true;
          break;
        }
      }

      if (!$list_exists) {

        $get_fields = $entity->getFields();
        $title = $entity->getTitle();
        $summary = $get_fields['body']->summary;
        // Api max is 255 characters.
        $summary = (strlen($summary) > 255) ? substr($summary, 0, 255) : $summary;
        $post_data = [
          'name' => $title,
          'favorite' => 0,
          'description' => $summary
        ];
        $post_data = json_encode($post_data);
      
        // Create Constant contact list named with AG title

        $created_list = $cca->apiCall('/contact_lists ', $post_data, 'POST');
        
        if (!empty($created_list)) {        
          $list_id = Xss::filter($created_list->list_id);
        }

        if (!empty($list_id)) {
            $entity->set('field_list_id', $list_id);
        } else {
            showStatus('Bad Constant Contact list id.');
        }
      }      
    }
  }
}

/**
 * Implements hook_entity_delete().
 * * Handles either
 * 1) User did Leave on Affinity Group
 * 2) Admin deleted Affinity Group
 */
function access_affinitygroup_entity_delete(\Drupal\Core\Entity\EntityInterface $entity)
{  
  $type = $entity->bundle();
    
  if ($type == 'affinity_group') {

    if (method_exists($entity, 'getFlaggableType')) {     
     
      $group_id = $entity->get('entity_id')->getValue()[0]['value'];
     
      $postJSON = makeListMembershipJSON($group_id, false);

      if (!empty($postJSON)) {      
        $cca = new ConstantContactApi;
        $ccResponse = $cca->apiCall('/activities/remove_list_memberships', $postJSON, 'POST');        
      }  

    } else {

      $title = $entity->getTitle();
      $cca = new ConstantContactApi;
      $lists = $cca->apiCall('/contact_lists');
      $list_exists = false;
      foreach ($lists->lists as $list) {
        if ($list->name == $title) {
          // Constant Contact contains affinity group
          // title in list.
          $list_id = $list->list_id;
          break;
        }
      }

      if (isset($list_id)) {
        $post_data = [
          'list_id' => $list_id
        ];
        $post_data = json_encode($post_data);
        $cca->apiCall("/contact_lists/$list_id", $list_id, 'DELETE');
      }
    }
  }
}

/**
 * Prepares json for api call that for adds or deletes CC user from 
 * a CC list.  
 * Called from code where we have the id, group_id from the Join/Leave flag
 * corresponding to the Affinity Group. From this, need to find the
 * node (AG) containing the CC list id. 
 */

function makeListMembershipJSON($group_id) 
{
  $current_user = \Drupal::currentUser();
  $user_id = $current_user->id();
        
  $user_detail = User::load($user_id);
  $user_cc_id = $user_detail->get('field_constant_contact_id')->getValue()[0]['value']; 

  if (empty($user_cc_id)) {
    return NULL;
  }

  $query = \Drupal::entityQuery('node');
  $node_ids = $query
    ->condition('field_affinity_group', $group_id)
    ->execute();
    
  $aval =  array_values($node_ids);
  $nid = $aval[0];

  $ag = \Drupal\node\Entity\Node::load($nid);  

  $fieldVal = $ag->get('field_list_id')->getValue();
  if (!empty($fieldVal)) {   
    $list_cc_id = $fieldVal[0]['value'];;
  }
    
  if (empty($list_cc_id)) {
    showStatus('Missing Constant Contact List Id for this Affinity Group.');
    return NULL;
  }

  $post_data = [
    'source' => [
      'contact_ids' => [$user_cc_id]
    ],
    'list_ids' =>  [$list_cc_id]
  ];
  $post_data = json_encode($post_data);
  return $post_data;
}

/**
 * Implements hook_user_login().
 * Add user to Constant Contact if we don't have a CC ID stored yet.
 */

// ? should we check if we've tried this before?  What if a certain user get cca err every time
//(but what case would this be, idn...), logging on will take a longer time?

function  access_affinitygroup_user_login(UserInterface $account)
{
  $current_user = \Drupal::currentUser();

  $user_id = $current_user->id();
  $user_detail = User::load($user_id);

  $cca_user_id = null;
  $field_val = $user_detail->get('field_constant_contact_id')->getValue();
  if (!empty($field_val)) {
    $cca_user_id = $field_val[0]['value'];    
  }

  if (empty($cca_user_id)) {

    $user_first_name = $user_detail->get('field_user_first_name')->getString();
    $user_last_name = $user_detail->get('field_user_last_name')->getString();
    $user_mail = $current_user->getEmail();
    
    $cca = new ConstantContactApi;
    $cca_user_id = $cca->addContact($user_first_name, $user_last_name, $user_mail, $user_id);
    
    if (empty($cca_user_id)) {
      //do we want to tell the user here that we were trying to create cc contact and could not?
      // or just in debugging?
    }else {
      $user_detail->set('field_constant_contact_id', $cca_user_id);
      $user_detail->save();
    }
  } else {
    // this else just for debugging in early stages
    //showStatus("Login and NOT attempting add of new constant contact id.");
  }

}
function showStatus($logmsg)
{  
  \Drupal::messenger()->addStatus($logmsg);
}    
/**
 * Implements hook_cron().
 */
function access_affinitygroup_cron()
{
  // Setting this to run once a day, may need adjustment
  // if cron is run more frequently.
  if ((date('G', time()) == 01) && (date('i', time()) >= 0) && (date('i', time()) <= 30)) {
    $cca = new ConstantContactApi;
    $cca->newToken();
  }
}

/** 
 * Return error msg, or NULL if not error (in 200's)
 * todo: Perhaps we only check for 401 + just show code num otherwise
*/
  
function getHttpErrMsg($httpCode) {

    if ($httpCode < 300) {
      return NULL;      
    }

    switch ($httpCode) {
      case 400:	
        $m = 'Bad request. Either the JSON was malformed or there was a data validation error.';
        break;
      case 401:
        $m = 'The Access Token used is invalid.';
        break;
      case 403:
        $m = 'Forbidden request. You lack the necessary scopes, you lack the necessary user privileges, or the application is deactivated.';
        break;
      case 409:
        $m = 'Conflict. The resource you are creating or updating conflicts with an existing resource.';
        break;
      case 415:
        $m = 'Unsupported Media Type; the payload must be in JSON format, and Content-Type must be application/json';
        break;
      case 500:	
        $m = 'There was a problem with our internal service.';
        break;
      case 503:	
        $m = 'Our internal service is temporarily unavailable.';
        break;
      default:
        $m = 'HTTP error code: '. $http_code;
    }
    return 'Constant Contact: '.$m;
  }
